Questions
=========

1. Difference between API and WebService:
An API (Application Programming Interface) is a set of rules and protocols that allows different
software applications to communicate with each other. It defines how different components of software
systems should interact. A web service is a type of API that is accessible over the internet using
standard web protocols such as HTTP. It enables communication between different applications or systems
over a network.

2. Difference between SOAP & Rest API:
SOAP (Simple Object Access Protocol) and REST (Representational State Transfer) are both web service
architectures used for communication between systems. SOAP is a protocol that uses XML as its message
format and typically operates over HTTP, SMTP, or TCP. It is more rigid and requires more bandwidth
compared to REST. REST, on the other hand, is an architectural style that uses a simpler message
format such as JSON or XML and relies on standard HTTP methods like GET, POST, PUT, DELETE for
communication. It is lightweight, scalable, and more flexible than SOAP.

3. Sample of API (URL) and JSON:
API URL: https://api.example.com/users
JSON sample:
json
Copy code
{
  "id": 1,
  "name": "John Doe",
  "email": "john@example.com"
}

4. Handling Authentication token:
Authentication tokens can be handled in REST Assured by including them in the request headers using
the header() method. For example:
given().header("Authorization", "Bearer <token>").get("/endpoint");

5. Types of Authentication in POSTMAN/Rest-Assured:
In POSTMAN/Rest-Assured, common types of authentication include
1. Basic Authentication,
2. Digest Authentication,
3. OAuth 1.0,
4. OAuth 2.0,
5. API Key Authentication, and
6. Bearer Token Authentication.

6. Difference between OAuth1.0 and OAuth2.0, with sample code:
OAuth 1.0 is an older version of the OAuth protocol that requires cryptographic signatures for
authentication. OAuth 2.0 is a newer version that relies on tokens for authentication and is more
widely used. Sample code for OAuth 2.0:
given()
    .auth().oauth2("access_token")
    .get("/endpoint");

7. BaseURI in RestAssured:
baseURI in RestAssured is a static variable that specifies the base URL of the API that will be
used for all requests. It eliminates the need to specify the full URL in each request and allows
for cleaner and more maintainable code.

8. Explanation of RequestSpecification request = RestAssured.given():
RequestSpecification in RestAssured is used to specify various aspects of an HTTP request, such as
headers, parameters, authentication, etc. RestAssured.given() is a static method that returns an
instance of RequestSpecification to build and configure HTTP requests.

9. Returned type of response.jsonPath().getJsonObject("XYZ"):
The returned type of response.jsonPath().getJsonObject("XYZ") is a JSON object containing the value
of the key "XYZ" extracted from the response JSON.

10. Extracting values of JSON and validating response:
Values of JSON can be extracted using JSONPath expressions or by converting the response to a POJO
(Plain Old Java Object). To validate a response, assertions can be used to verify status codes, headers,
and specific data in the response body.

11. Code to save the response in a JSON file:
Response response = given().get("/endpoint");
response.then().statusCode(200); // Validate status code if needed
String responseBody = response.getBody().asString();
try (FileWriter file = new FileWriter("response.json")) {
    file.write(responseBody);
} catch (IOException e) {
    e.printStackTrace();
}

12. Validating headers of response:
Response response = given().get("/endpoint");
response.then().assertThat().header("Content-Type", "application/json");

13. Difference between Headers and Header class:
Headers represents a collection of HTTP headers in REST Assured, while Header represents an individual
HTTP header.

14. Difference between response.header("xyz") and response.headers() methods:
response.header("xyz") returns the value of a specific header named "xyz", while response.headers()
returns all headers as a map.

15. Extracting all headers from response at runtime:
Response response = given().get("/endpoint");
Headers allHeaders = response.getHeaders();

16. Explanation of various methods:
1. JSONObject() is a class used to create JSON objects in Java.
2. request.header("xyz") retrieves the value of the header "xyz" from the request.
3. response.path("label") retrieves the value of the JSON path "label" from the response body.
4. response.body().asString() converts the response body to a string.
5. response.getBody().prettyPrint() prints the response body in a formatted (pretty-printed) manner.
6. RestAssured.given().queryParam("xyz","abc") sets a query parameter "xyz" with value "abc" in the request.

17. Difference between request.get() and request.request(Method.GET,"/ allcustomers "):
request.get("https://example.com") sends a GET request to the specified URL, while
request.request(Method.GET, "/allcustomers") sends a GET request to the specified path
relative to the base URI.

18. Difference between PUT and Patch and their usage:
PUT is used to update a resource completely, while PATCH is used to apply partial modifications to a
resource. PUT replaces the entire resource with the new data, whereas PATCH updates only specific fields
of the resource.

19. Status codes (2xx, 3xx, 4xx, 5xx) in API:
1. 2xx status codes indicate success (e.g., 200 OK).
2. 3xx status codes indicate redirection.
3. 4xx status codes indicate client errors (e.g., 404 Not Found).
4. 5xx status codes indicate server errors (e.g., 500 Internal Server Error).

20. Printing response in JSON format:
You can print the response in JSON format using response.getBody().prettyPrint().

21. Posting body in POST and ways to post:
You can post a body in a POST request using methods like body() or with(). Ways to post include sending
JSON, XML, or form data in the body.

22. RESTfully define a resource.
Any material is treated as a resource in the REST framework. This material consists of dynamic business
information, HTML pages, text files, photos, and videos. These resources are accessible to users through
a REST server, which can also modify them. Each resource is identified by a unique URI.

23. Name the essential elements of an HTTP response.
There are five components to an HTTP request
1. Event such as DELETE, GET, and POST. This component displays the HTTP method.
2. A unique resource identification number (URI). The service on the server is identified by this element.
3. The version over HTTP.
4. An application header The information for the message is contained in this element. The message body
format, client or browser type, cache settings, and other factors could all be included in the metadata.
5. Message body

24. What technique does caching use in Rest Assured API testing?
Rest Assured allows you to cache responses from API requests, which can help improve the efficiency and
speed of your test suite. This caching technique involves storing the responses received from API endpoints
locally or in memory. Subsequent requests to the same endpoint can then be served from the cache rather
than making a new request to the server. This is particularly useful when testing APIs that have a large
volume of repetitive requests or when executing test suites with a high number of requests.

25. What is the best way to ensure that private information isn't included in the login process in Rest
Assured API Testing?
Blacklisting Sensitive Headers:
===============================
Rest Assured 4.2.0+ Feature: If your tests still involve Basic Authentication or need to handle scenarios
with potentially exposed information, you can leverage the blacklistHeader method.

How it Works: This method allows you to specify header names (e.g., "Authorization") that should be
excluded from being logged in the test output. This way, sensitive data like passwords won't be revealed
in logs or reports generated during testing.

given()
  .auth().basic("username", "password") // Assuming test setup
  .header("someHeader", "someValue")
.when()
  .post("/login")
.then()
  .blacklistHeader("Authorization") // Exclude Authorization header from logs
  .statusCode(200);

26. Explain REST Assured method chaining?
REST Assured method chaining is a powerful feature that allows you to write concise and readable API test
scripts in Java. Method chaining, also known as fluent interface, enables you to chain together multiple
method calls on the same object in a sequential manner.
In REST Assured, method chaining is commonly used to construct API requests and validate responses.

Benefits of Method Chaining:
============================
Improved Readability: Breaks down complex requests into smaller, easier-to-understand steps.
Maintainability: Easier to modify or extend existing tests by chaining different methods.
Fluent Interface: Provides a more natural flow for writing your tests.

27. Describe how to extract data from a response in REST Assured?
The extract() method on the Response object allows you to retrieve specific data from the response.
Use extract() with methods like asString(), path(), or as() for complex data extraction or converting
the response to a specific format.
Use response body methods directly for simpler tasks like retrieving the status code or specific headers.

Extracting the Entire Response Body as a String:
String responseString = get("/users").then().extract().asString();

Extracting a Specific Value from JSON Response using JsonPath:
int userId = get("/user/123").then().extract().path("id");

Extracting the Entire Response as a POJO:
User user = get("/user/123").then().extract().as(User.class);

28. Discuss the use of filters in REST Assured. Explain with code sample?
REST Assured filters allow you to intercept and modify both requests and responses before they are sent
or processed further. This provides flexibility to customize your API tests in various ways.

Functionality:
==============
Request Manipulation: Filters can add, modify, or remove headers, parameters, body content, etc., from
the outgoing request before it's sent to the server.

Response Manipulation: Similarly, filters can modify the incoming response by altering headers, extracting
data, or logging specific information.

Custom Logic: You can implement custom logic within filters to achieve specific functionalities during
testing, like adding authentication tokens or handling rate limiting.

29. What is JSONPath in REST Assured, and how do you use it?
JSONPath is a query language for JSON, similar to XPath for XML. In REST Assured, JSONPath expressions
are used to extract specific parts from a JSON response. This is done using the ‘JsonPath’ class or the
‘path()’ method in the response.

30. How do you handle SSL/TLS certificates in REST Assured?
SSL/TLS certificates can be handled in REST Assured by configuring the SSL context or using methods like
‘relaxedHTTPSValidation()’ for less stringent validation, which is useful in testing environments.

31. How do you handle dynamic responses in REST Assured?
Use of Placeholder Values:
Replace dynamic parts of the response with placeholder values, like using any() for unpredictable data.
given().get("/api/user").then().body("name", any(String.class));

Regular Expressions for Pattern Matching:
get("/logs").then().assertThat().body("timestamp", matches("\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z"));
// This asserts the timestamp format (YYYY-MM-DDTHH:MM:SSZ)

Hamcrest Matchers for Complex Assertions:
get("/users").then().assertThat().body("$[*]", hasItem(hasKey("id")));
// This asserts that there's at least one object with an "id" key in the response array

Ignoring Dynamic Parts with Excludes() for Body Validation:
Use the body().excludes() method to specify parts of the response to exclude from validation. This helps
focus on the essential aspects of the response.

get("/data").then().assertThat().body(excludingPath("timestamp"), equalTo(expectedResponse));
// This validates the response body excluding the "timestamp" path

32. Discuss advanced error handling and debugging techniques in REST Assured?
Custom Error Messages: Provide clear error messages for quick issue identification in failed assertions.
given().get("/api/endpoint")
.then().assertThat().statusCode(200).onFailMessage("Expected status code: 200")

Error Handling Filters: Use filters for custom actions on specific responses.
given().get("/api/endpoint")
.then().statusCode(200)
.filters((response, filterContext) -> {
    if (response.statusCode() != 200) {
        // Custom actions for non-200 responses
    }
});

