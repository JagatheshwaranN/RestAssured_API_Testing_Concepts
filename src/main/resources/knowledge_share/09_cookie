Questions
=========

1. What are cookies in the context of web applications?
Cookies are small pieces of data that websites store on a user's device. They are typically used to
remember user preferences, track user behavior, and maintain user sessions across multiple requests.

2. How can you handle cookies in REST Assured tests?
In REST Assured, we can handle cookies using the cookies method to extract cookies from the response
or set cookies in the request. We can then assert the presence or absence of specific cookies using
assertions.

3. Explain the importance of testing cookies in REST Assured API testing.
Testing cookies in REST Assured API testing is important to ensure that the API correctly sets and
manages cookies in the response. This includes verifying that cookies are set with the correct attributes,
such as expiration date and domain, and that they are used appropriately for session management and
authentication.

4. How do you verify the presence of a specific cookie in a REST Assured test?
In REST Assured, we can verify the presence of a specific cookie by extracting it from the response using
the cookies method and then asserting its existence using assertions. For example, we can use
assertThat().cookie("cookieName") to assert that a cookie named "cookieName" is present in the response.

5. Can you demonstrate how to set a cookie in a REST Assured request?
We can set a cookie in a REST Assured request using the given().cookie() method. For example, to set a
cookie named "sessionId" with a value of "12345", we can use the following syntax:
given().cookie("sessionId", "12345")

6. What are some common scenarios where testing cookies in REST Assured is necessary?
Common scenarios where testing cookies in REST Assured is necessary include:
1. Verifying that authentication cookies are correctly set after successful login requests.
2. Testing session management by ensuring that session cookies are maintained and updated across
subsequent requests.
3. Validating that cookies are expired or deleted when the session ends or the user logs out.

6. How would you use Rest Assured to extract a cookie value from a response and then validate its
presence and content in a subsequent request?

You can achieve this using the following steps:
1. Extract the cookie: Use response.getCookie("cookieName") to retrieve the cookie object with the
specified name.
2. Store the cookie value: Extract the actual value using cookie.getValue().
3. Add the cookie to a new request: Use given().cookie("cookieName", extractedValue) to include the
cookie in the next request.
4. Validate cookie presence: In the subsequent request's then block, use assertThat().cookie("cookieName")
.exists() to check if the cookie is present.
5. Validate cookie value (optional): Use assertThat().cookie("cookieName").equalTo(expectedValue) to
verify the cookie value matches your expectation.

7. How would you configure RestAssured to ignore specific cookies during testing that might interfere
with your tests?
You can use the relaxed() method within the given() block to instruct RestAssured to ignore certain cookies.
given()
  .baseUri("https://api.example.com")
  .relaxed(RestAssured.responseSpecification().cookie("ignoredCookie", null))
  // ... rest of your request configuration

8. What are the different types of Cookies available?
1. Session Cookie
=================
Session Cookie is used to maintain the user session.
2. Persistent Cookie
====================
Persistent Cookie is something which can be used even the user session is closed. It has its
own expiry.
3. Secure Cookie
================
Secure Cookie is used only with Https protocol.
4. Http-Only Cookie
===================
Http-Only Cookie is something which can't be read by JS program running on Client side. So, if
a Cookie is set with Http-Only then it will add some security.
5. Same Site Cookie
===================
SameSite Cookie is a single domain Cookie. For example, if a Cookie is set for xyz domain and
it can't be used for another domain.
